openapi: 3.0.3
info:
  title: Game Score Manager API
  version: 1.3.9
  description: Swagger for Game Score manager
  contact:
    email: desarrollo070615@gmail.com
    name: Leidy Santos
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
servers:
  - url: http://localhost:3000/api/v1/
  - url: http://172.10.10.1:3000/api/v1/
tags:
  - name: Users
    description: Domain about user data
  - name: Scores
    description: Domain about scores data
  - name: Authentication
    description: Domain about authentication options
paths:
  /auth/register:
    post:
      summary: Create user
      tags:
        - Authentication
      description: Auth user with email or username, and password
      operationId: register
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                  format: uuId
                  example: 45247989-8807-4cec-bf65-50632859a8f5
                name:
                  type: string
                  example: Leidy Santos
                username:
                  type: string
                  example: lsantos
                email:
                  type: string
                  format: email
                  example: prueba@yopmail.com
                password:
                  type: string
                  format: password
                  example: 114c884d2a1cd1cde577ff109c3db5c6
                role:
                  type: string
                  example: admin
                status:
                  type: string
                  example: Active
      responses:
        '201':
          description: User register successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          description: User bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse400'
        '409':
          description: User Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse409'
  /auth/login:
    post:
      summary: Login user
      tags: 
        - Authentication
      description: Auth user with username, and password
      operationId: login
      requestBody: 
        required: true
        content:
          application/json: 
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: lsantos
                password:
                  type: string
                  format: password
                  example: 114c884d2a1cd1cde577ff109c3db5c6
      responses: 
        '200':
          description: Login successful
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse401'
        '400':
          description: User bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse400'
  /users/profile/{userId}:
    get: 
      summary: Get user profile
      security:
        - bearerAuth: []
      tags:
        - Users
      description: Get detail of user profile by ID
      operationId: profile
      parameters:
        - name: userId
          in: path
          description: The ID that need to be fetched.
          required: true
          schema: 
            type: string
      responses:
        '200':
          description: User data uploaded successfully
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse401'
        '400':
          description: User bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse400'
    put:
      summary: Update profile user
      security:
        - bearerAuth: []
      tags:
        - Users
      description: Update profile user by ID
      parameters:
        - name: userId
          in: path
          description: The ID that need to be fetched.
          required: true
          schema: 
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                  format: uuId
                  example: 45247989-8807-4cec-bf65-50632859a8f5
                name:
                  type: string
                  example: Leidy Santos
                username:
                  type: string
                  example: LCSA
                email:
                  type: string
                  format: email
                  example: prueba@yopmail.com
                password:
                  type: string
                  format: password
                  example: 114c884d2a1cd1cde577ff109c3db5c6
                role:
                  type: string
                  example: admin
      responses:
        '200':
          description: User data updated successfully
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse401'
        '400':
          description: User bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse400'
  /users/scores/{userId}: 
    get: 
      summary: Get scores
      security:
        - bearerAuth: []
      tags:
        - Scores
      description: Get scores of user by user ID
      operationId: scores
      parameters:
        - name: userId
          in: path
          description: The ID that need to be fetched.
          required: true
          schema: 
            type: string
        - name: page
          in: query
          description: Actual page
          required: false
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          description: Number of elements per page
          required: false
          schema:
            type: integer
            default: 10    
      responses:
        '200':
          description: User data uploaded successfully
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/ScorePagination'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse401'
        '400':
          description: User bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse400'       
  /scores/{userId}:
    post: 
      tags: 
        - Scores
      summary: Create score
      security:
        - bearerAuth: []
      description:  Create new score
      parameters:
        - name: userId
          in: path
          description: The ID that need to be fetched.
          required: true
          schema: 
            type: string 
      requestBody:
        description: Created score object
        content:
          application/json:
            schema:
              type: object
              properties:
                score:
                  type: number
                  example: 100
      responses:
        '201':
          description: Score created successfully
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/ScoreResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse401'
        '400':
          description: User bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse400'
  /scores/leaderboard:
    get:
      summary: Get global scores
      security:
        - bearerAuth: []
      tags:
        - Scores
      description: Get better scores
      parameters:
        - name: page
          in: query
          description: Actual page
          required: false
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          description: Number of elements per page
          required: false
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: Global scores uploaded successfully
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/ScorePagination'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse401'
        '400':
          description: User bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse400'
  /users/admin:
   get:
      summary: Get all users
      security:
        - bearerAuth: []
      tags:
        - Users
      description: Get all users by admin
      parameters:
        - name: page
          in: query
          description: Actual page
          required: false
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          description: Number of elements per page
          required: false
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: All users uploaded successfully
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/UserPagination'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse401'
        '400':
          description: User bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse400'
        '403':
          description: Valid token, no permission for this action
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse403'        
  /users/admin/{userId}:
    patch:
      summary: Enable or block user
      security:
        - bearerAuth: []
      tags:
        - Users
      description: Enable or block user by admin
      parameters:
        - name: userId
          in: path
          description: The ID that need to be fetched.
          required: true
          schema: 
            type: string 
      responses:
        '200':
          description: User enabled or block successfully
          content: 
            application/json:
              schema: 
                $ref: '#/components/schemas/UserResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse401'
        '400':
          description: User bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse400'
        '403':
          description: Valid token, no permission for this action
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse403'        
    delete:
      summary: Delete user
      security:
        - bearerAuth: []
      tags:
        - Users
      description: Delete user by admin
      parameters:
        - name: userId
          in: path
          description: The ID that need to be fetched.
          required: true
          schema: 
            type: string 
      responses:
        '200':
          description: User removed successfully
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteUserResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse401'
        '400':
          description: User bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse400'
        '403':
          description: Valid token, no permission for this action
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse403'        
  /users/admin/scores/{scoreId}:
    delete:
      summary: Delete specific score
      security:
        - bearerAuth: []
      tags:
        - Users
      description: Delete specific score by admin
      parameters:
        - name: scoreId
          in: path
          description: The ID that need to be fetched.
          required: true
          schema: 
            type: string 
      responses:
        '200':
          description: Score removed successfully
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/ScoreResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse401'
        '400':
          description: User bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse400'
        '403':
          description: Valid token, no permission for this action
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse403'        
components:
  schemas:
    UserResponse:
      type: object
      properties:
        id:
          type: string
          example: 45247989-8807-4cec-bf65-50632859a8f5
        name:
          type: string
          example: Leidy Santos
        username:
          type: string
          example: lsantos
        email:
          type: string
          format: email
          example: prueba@yopmail.com
        role:
          type: string
          example: admin
        token: 
          type: string
          example: HHOl6ie7sb4NBYmypXOKmo5cVB8IMy7gm6xDqI4XeDthmS5GPSI1oabdxIShX8r1
        status:
          type: string
          example: Valid
    UserPagination:
      type: object
      properties:
        currentPage:
          type: integer
          description: actual page
          example: 1
        totalPages:
          type: integer
          description: Total available pages
          example: 10
        totalUsers:
          type: integer
          description: Total users
          example: 20
        users:
          type: array
          items:
            $ref: '#/components/schemas/UserResponse'
    DeleteUserResponse:
      type: object
      properties:
        id:
          type: string
          format: uuId
          example: 45247989-8807-4cec-bf65-50632859a8f5
        name:
          type: string
          example: Leidy Santos
        username:
          type: string
          example: lsantos
        email:
          type: string
          format: email
          example: prueba@yopmail.com
        password:
          type: string
          format: password
          example: 114c884d2a1cd1cde577ff109c3db5c6
        role:
          type: string
          example: admin
        token:
          type: string
          example: HHOl6ie7sb4NBYmypXOKmo5cVB8IMy7gm6xDqI4XeDthmS5GPSI1obdxIShX8r1
        status:
          type: string
          example: Invalid      
    ScoreResponse:
      type: object
      properties: 
        scoreId:
          type: string
          description: ID of score
          example: 45247989-8807-4cec-bf65-50632859a8f5
        userId:
          type: string
          description: ID of user
          example: 45247989-8807-4cec-bf65-50632859a8f5
        game: 
          type: string
          description: Name of game
          example: 'God of war'
        score:
          type: number
          description: score of game 
          example: 100
        createdAt:
          type: string
          description: Date of create score
          example: '11/10/2024'
        updatedAt: 
          type: string
          description: Date of update score
          example: '12/10/2024'
    ScorePagination:
      type: object
      properties:
        currentPage:
          type: integer
          description: actual page
          example: 1
        totalPages:
          type: integer
          description: Total available pages
          example: 10
        totalScores:
          type: integer
          description: Total scores
          example: 20
        scores:
          type: array
          items:
            $ref: '#/components/schemas/ScoreResponse'      
    UserResponse201:
      type: object
      properties:
        id:
          type: string
          example: 45247989-8807-4cec-bf65-50632859a8f5
        name:
          type: string
          example: Leidy Santos
        username:
          type: string
          example: lsantos
        email:
          type: string
          format: email
          example: prueba@yopmail.com
        role:
          type: string
          example: admin
        token: 
          type: string
          example: HHOl6ie7sb4NBYmypXOKmo5cVB8IMy7gm6xDqI4XeDthmS5GPSI1oabdxIShX8r1
    ScoreResponse201:
      type: object
      properties:
        scoreId:
          type: string
          description: ID of score
        userId:
          type: string
          description: ID of user
        game: 
          type: string
          description: Name of game
        score:
          type: number
          description: score of game 
        createdAt:
          type: string
          description: Date of create score
        updatedAt: 
          type: string
          description: Date of update score
    ErrorResponse400:
      type: object
      properties:
        message:
          type: string
          example: Invalid data
        statusCode:
          type: integer
          example: 400
    ErrorResponse409:
      type: object
      properties:
        message:
          type: string
          example: Conflict
        statusCode:
          type: integer
          example: 409
    ErrorResponse401:
      type: object
      properties:
        message:
          type: string
          example: Unauthorized
        statusCode:
          type: integer
          example: 401
    ErrorResponse403:
      type: object
      properties:
        message:
          type: string
          example: Valid token, but you don't have access to this functionality
        statusCode:
          type: integer
          example: 403
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT        
